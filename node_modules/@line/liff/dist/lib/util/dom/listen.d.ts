interface EventHandlers {
    [k: string]: Function | null;
}
/**
 * to retrieved cached values
 */
export declare function getEventHandlers(): EventHandlers;
/**
 * Cleanup cached the variables, testing use
 */
export declare function _cleanupCache(): void;
/**
 * main function to addEventListener with Promise which is resolve by being called at first time
 * you can remove eventListener you added with this function by using `removeListen.ts`
 * @param target Target Elements or Window
 * @param key One or more space-separated event types and optional namespaces, such as "click" or "keydown.myPlugin".
 * @param callback A function to execute when the event is triggered.
 * @param options same as AddEventListenerOptions. see MDN if you find out more
 */
export default function listen(target: HTMLElement | HTMLDocument | Window, key: string, callback?: (e: Event) => void, options?: AddEventListenerOptions): Promise<Event>;
export {};
