import { SendMessagesParams } from './../sendMessages';
import { TellEvent } from '../../util/dom';
export declare const CLOSE_SHARETARGETPICKER_FAIL = 0;
export declare const CLOSE_SHARETARGETPICKER_SUCCEED = 1;
/**
 * the format to send data to another window
 */
export interface PayloadToShareTargetPicker {
    messages: SendMessagesParams;
    referrer: {
        liffId: string;
        url: string;
    };
}
/**
 * the format in common with each closed event called when lfw/sub window closed
 */
export interface ClosedBody {
    status?: number;
    res?: {
        message?: string;
    };
    callbackId: string;
}
/**
 * the event called when lfw is closed
 */
export interface ClosedWebview extends CustomEvent {
    detail: ClosedBody;
}
/**
 * the event called when popup window is closed
 */
export interface ClosedPopupWindow extends TellEvent {
    data: {
        name: string;
        body: ClosedBody;
    };
}
/**
 * the format of parameters for init is same as the format of payload to send to another screen so far.
 * but the way to use is different. So I defined 2 types
 */
export interface InitParams extends PayloadToShareTargetPicker {
    options?: {
        waitForSubwindowResult: boolean;
    };
}
export interface RetrievedOtt {
    ott: string;
}
export interface RetrievedShareResult {
    result?: 'SUCCESS' | 'FAILURE' | 'CANCEL';
    resultDescription: string;
}
export interface ShareTargetPickerResult {
    status: 'success';
}
