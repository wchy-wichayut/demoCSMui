import { InitParams, ShareTargetPickerResult } from './def';
/**
 * ShareTargetPicker
 * (Singleton Class)
 */
export default class ShareTargetPicker {
    private static instance;
    private liffId;
    private allowPostMessageOrigin;
    private payloadToShareTargetPicker;
    private ott;
    private popupWindow;
    private timeoutIDForHealthCheck;
    private abortController;
    private internalError;
    private doesWaitForSubwindowResult;
    private constructor();
    /**
     * return Singleton instance
     */
    static getInstance(): ShareTargetPicker;
    /**
     * initialize
     * @param params
     */
    init(params: InitParams): Promise<ShareTargetPickerResult | void>;
    private resetAllVariables;
    /**
     * reset instance
     */
    private reset;
    /**
     * called whenever the process is finished
     */
    private finalize;
    /**
     * create payload data in accordance with the relevant format
     * So far, the format of `PayloadToShareTargetPicker` is same as `InitParams`
     * @param params
     */
    private buildPayloadToShareTargetPicker;
    /**
     * return string like "https://example.com" (not includes last `/`)
     * @param url
     */
    private initAllowPostMessageOrigin;
    private initOtt;
    /**
     * get a reference to the new window
     */
    private prepareAnotherWindow;
    /**
     * emit corresponding events
     */
    private openAnotherWindow;
    /**
     * start to listen corresponding events
     */
    private initListener;
    /**
     * this function will be called every second
     */
    private healthCheck;
    /**
     * called after receiving the event named "receivedHealthCheck" . this function is called except on LIFF
     */
    private onReceivedHealthcheck;
    /**
     * post share result (only for external browser)
     */
    private onCanceled;
    /**
     * Fetch Get Share Result
     */
    private getShareResult;
    /**
     * check if elapsed max duration of polling
     *
     * @static
     * @param {number} startTime
     * @param {number} endTime
     * @returns {boolean}
     * @memberof ShareTargetPicker
     */
    static isPollingTimeOut(startTime: number, endTime: number): boolean;
    /**
     * Polling server side API to get result from shareTargetPicker screen,
     * which has an access to access.line.me, via server API.
     *
     * @private
     * @returns {(Promise<ShareTargetPickerResult|void>)}
     * @memberof ShareTargetPicker
     */
    private pollingShareResult;
}
